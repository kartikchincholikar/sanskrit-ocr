{"version":3,"file":"main.bundle.js","mappings":"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","sources":["webpack://blogpost/./src/fragmentLoader.js","webpack://blogpost/./src/syncHFSpacesURLHash.js","webpack://blogpost/./src/index.js"],"sourcesContent":["async function loadFragments() {\r\n    // Find all elements with ids starting with 'fragment-'\r\n    const fragmentElements = Array.from(document.querySelectorAll('[id^=\"fragment-\"]'));\r\n    \r\n    class FetchQueue {\r\n        constructor(maxConcurrent = 3) {\r\n            this.queue = [];\r\n            this.maxConcurrent = maxConcurrent;\r\n            this.activeFetches = 0;\r\n            this.maxRetries = 3; // Maximum number of retry attempts\r\n            this.baseDelay = 1000; // Base delay in milliseconds (1 second)\r\n        }\r\n\r\n        async sleep(ms) {\r\n            return new Promise(resolve => setTimeout(resolve, ms));\r\n        }\r\n\r\n        async fetchWithRetry(fragmentPath, retryCount = 0) {\r\n            try {\r\n                const response = await fetch(fragmentPath);\r\n                if (!response.ok) {\r\n                    throw new Error(`HTTP error! status: ${response.status}`);\r\n                }\r\n                return await response.text();\r\n            } catch (error) {\r\n                if (retryCount < this.maxRetries) {\r\n                    // Exponential backoff: 1s, 2s, 4s\r\n                    const delay = this.baseDelay * Math.pow(2, retryCount);\r\n                    console.warn(`Retry ${retryCount + 1}/${this.maxRetries} for ${fragmentPath} after ${delay}ms`);\r\n                    await this.sleep(delay);\r\n                    return this.fetchWithRetry(fragmentPath, retryCount + 1);\r\n                }\r\n                throw error;\r\n            }\r\n        }\r\n\r\n        async addFetch(element) {\r\n            const fragmentName = element.id.replace('fragment-', '');\r\n            const fragmentPath = `fragments/${fragmentName}.html`;\r\n            \r\n            return new Promise(async (resolve, reject) => {\r\n                try {\r\n                    const fetchPromise = (async () => {\r\n                        try {\r\n                            const html = await this.fetchWithRetry(fragmentPath);\r\n                            \r\n                            // Process the fragment\r\n                            const temp = document.createElement('div');\r\n                            temp.innerHTML = html;\r\n                            element.innerHTML = temp.innerHTML;\r\n                            \r\n                            // Handle scripts\r\n                            const scripts = temp.getElementsByTagName('script');\r\n                            Array.from(scripts).forEach(oldScript => {\r\n                                const newScript = document.createElement('script');\r\n                                Array.from(oldScript.attributes).forEach(attr => {\r\n                                    newScript.setAttribute(attr.name, attr.value);\r\n                                });\r\n                                newScript.textContent = oldScript.textContent;\r\n                                oldScript.parentNode.removeChild(oldScript);\r\n                                document.body.appendChild(newScript);\r\n                            });\r\n                            \r\n                            this.activeFetches--;\r\n                            resolve();\r\n                        } catch (error) {\r\n                            console.error(`Failed to load fragment ${fragmentPath} after ${this.maxRetries} retries:`, error);\r\n                            this.activeFetches--;\r\n                            reject(error);\r\n                        }\r\n                    })();\r\n\r\n                    this.queue.push(fetchPromise);\r\n                    this.activeFetches++;\r\n                } catch (error) {\r\n                    reject(error);\r\n                }\r\n            });\r\n        }\r\n\r\n        async processNext(element) {\r\n            if (this.activeFetches < this.maxConcurrent && element) {\r\n                await this.addFetch(element);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Initialize queue\r\n    const fetchQueue = new FetchQueue(3);\r\n    let currentIndex = 0;\r\n    const elements = fragmentElements; // Assuming this is defined elsewhere\r\n\r\n    // Initial loading of first 3 elements\r\n    while (currentIndex < elements.length && currentIndex < 3) {\r\n        await fetchQueue.processNext(elements[currentIndex]);\r\n        currentIndex++;\r\n    }\r\n\r\n    // Process remaining elements as fetches complete\r\n    while (currentIndex < elements.length) {\r\n        // Wait for any fetch to complete\r\n        await Promise.race(fetchQueue.queue);\r\n        // Remove completed fetch from queue\r\n        fetchQueue.queue = fetchQueue.queue.filter(p => p.status === 'pending');\r\n        // Add next element to queue\r\n        await fetchQueue.processNext(elements[currentIndex]);\r\n        currentIndex++;\r\n    }\r\n\r\n    // Wait for remaining fetches to complete\r\n    await Promise.all(fetchQueue.queue);\r\n}\r\n\r\nexport { loadFragments }","const queryArg = \"section\";\r\n\r\nfunction syncHFSpacesURLHash() {\r\n  // Handle explicit section requests (don't update hash automatically on load)\r\n  const hasExplicitRequest = handleExplicitSectionRequest();\r\n  \r\n  // Set up hash change monitoring\r\n  updateHashBasedOnHashChange();\r\n  \r\n  // Always set up scroll monitoring to update hash during scrolling\r\n  setupScrollMonitoring();\r\n  \r\n  // If no explicit request, we don't update the hash on initial load\r\n  // The hash will only start updating when the user scrolls\r\n}\r\n\r\nfunction handleExplicitSectionRequest() {\r\n  // Check for section parameter in URL\r\n  const urlParams = new URLSearchParams(window.location.search);\r\n  const sectionId = urlParams.get(queryArg);\r\n  \r\n  // If we have an explicit section request\r\n  if (sectionId) {\r\n    const targetElement = document.getElementById(sectionId);\r\n    if (targetElement) {\r\n      // Slight delay to ensure the browser doesn't try to do its own scrolling first\r\n      setTimeout(() => {\r\n        targetElement.scrollIntoView();\r\n        history.replaceState(null, null, `#${sectionId}`);\r\n      }, 100);\r\n    }\r\n    return true;\r\n  }\r\n  \r\n  // No explicit section parameter found\r\n  return false;\r\n}\r\n\r\nfunction setupScrollMonitoring() {\r\n  // Variables to manage throttling\r\n  let isScrolling = false;\r\n  let lastKnownScrollPosition = 0;\r\n  let initialScroll = true;\r\n  \r\n  // Add the scroll event listener\r\n  window.addEventListener('scroll', function() {\r\n    lastKnownScrollPosition = window.scrollY;\r\n    \r\n    if (!isScrolling) {\r\n      window.requestAnimationFrame(function() {\r\n        // Skip the first scroll event which might be browser's automatic scroll\r\n        // to a hash on page load\r\n        if (initialScroll) {\r\n          initialScroll = false;\r\n        } else {\r\n          updateHashBasedOnScroll(lastKnownScrollPosition);\r\n        }\r\n        isScrolling = false;\r\n      });\r\n    }\r\n    \r\n    isScrolling = true;\r\n  });\r\n}\r\n\r\n// Function to update the URL hash based on scroll position\r\nfunction updateHashBasedOnScroll(scrollPosition) {\r\n  const closestHeading = findClosestHeading(scrollPosition);\r\n  \r\n  // Update the URL hash if we found a closest element\r\n  if (closestHeading && closestHeading.id) {\r\n    // Only update if the hash is different to avoid unnecessary operations\r\n    if (window.location.hash !== `#${closestHeading.id}`) {\r\n      silentlyUpdateHash(closestHeading.id);\r\n      postMessageToHFSpaces(closestHeading.id);\r\n    }\r\n  }\r\n}\r\n\r\n// Find the closest heading to the current scroll position\r\nfunction findClosestHeading(scrollPosition) {\r\n  // Get only heading elements with IDs that we want to track\r\n  const headingsWithIds = Array.from(document.querySelectorAll('h1[id], h2[id], h3[id], h4[id], h5[id], h6[id]'));\r\n\r\n  // Skip if there are no headings with IDs\r\n  if (headingsWithIds.length === 0) return null;\r\n\r\n  // Find the element closest to the middle of the viewport\r\n  let closestHeading = null;\r\n  let closestDistance = Infinity;\r\n  const viewportMiddle = scrollPosition + window.innerHeight / 2;\r\n  \r\n  // Iterate through all headings to find the closest one\r\n  headingsWithIds.forEach(heading => {\r\n    const headingTop = heading.getBoundingClientRect().top + scrollPosition;\r\n    const distance = Math.abs(headingTop - viewportMiddle);\r\n    \r\n    if (distance < closestDistance) {\r\n      closestDistance = distance;\r\n      closestHeading = heading;\r\n    }\r\n  });\r\n  \r\n  return closestHeading;\r\n}\r\n\r\n// Update hash without triggering scroll or other side effects\r\nfunction silentlyUpdateHash(id) {\r\n  history.replaceState(null, null, `#${id}`);\r\n}\r\n\r\nfunction updateHashBasedOnHashChange() {\r\n  window.addEventListener('hashchange', () => {\r\n    const elementId = window.location.hash.slice(1);\r\n    postMessageToHFSpaces(elementId);\r\n  });\r\n}\r\n\r\nfunction postMessageToHFSpaces(elementId) {\r\n  const parentOrigin = \"https://huggingface.co\";\r\n  window.parent.postMessage({ queryString: `${queryArg}=${elementId}` }, parentOrigin);\r\n}\r\n\r\nexport { syncHFSpacesURLHash };\r\n","// import { plotClusters } from './clusters'\r\nimport { loadFragments } from './fragmentLoader'\r\nimport { syncHFSpacesURLHash } from './syncHFSpacesURLHash'\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n    console.log(\"DOMContentLoaded\");\r\n    loadFragments();\r\n    init_memory_plot();\r\n    syncHFSpacesURLHash();\r\n}, { once: true });\r\n"],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","_catch","delegateYield","_classCallCheck","_defineProperties","_toPropertyKey","key","_createClass","_toPrimitive","toPrimitive","String","Number","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","loadFragments","_loadFragments","_callee7","fragmentElements","FetchQueue","fetchQueue","currentIndex","elements","_callee7$","_context7","Array","from","document","querySelectorAll","maxConcurrent","undefined","queue","activeFetches","maxRetries","baseDelay","_sleep","_callee","ms","_callee$","_context","setTimeout","sleep","_x","_fetchWithRetry","_callee2","fragmentPath","retryCount","response","delay","_args2","_callee2$","_context2","fetch","ok","concat","status","text","t0","Math","pow","console","warn","fetchWithRetry","_x2","_addFetch","_callee5","element","_this","fragmentName","_callee5$","_context5","id","replace","_ref","_callee4","reject","fetchPromise","_callee4$","_context4","_callee3","html","temp","scripts","_callee3$","_context3","createElement","innerHTML","getElementsByTagName","oldScript","newScript","attributes","attr","setAttribute","textContent","parentNode","removeChild","body","appendChild","error","_x4","_x5","addFetch","_x3","_processNext","_callee6","_callee6$","_context6","processNext","_x6","race","filter","all","queryArg","syncHFSpacesURLHash","hasExplicitRequest","handleExplicitSectionRequest","updateHashBasedOnHashChange","setupScrollMonitoring","urlParams","URLSearchParams","window","location","search","sectionId","get","targetElement","getElementById","scrollIntoView","history","replaceState","isScrolling","lastKnownScrollPosition","initialScroll","addEventListener","scrollY","requestAnimationFrame","updateHashBasedOnScroll","scrollPosition","closestHeading","findClosestHeading","hash","silentlyUpdateHash","postMessageToHFSpaces","headingsWithIds","closestDistance","Infinity","viewportMiddle","innerHeight","heading","headingTop","getBoundingClientRect","top","distance","abs","elementId","parentOrigin","parent","postMessage","queryString","log","init_memory_plot","once"],"sourceRoot":""}